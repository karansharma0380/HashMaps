Que: Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in
 t(including duplicates) is included in the window. If there is no such substring, return the empty string "".

The testcases will be generated such that the answer is unique.

Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.

Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.

Input: s = "a", t = "aa"
Output: ""
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.

Soln:

public static String solve(String s1,String s2){
        String ans= "";
        
        HashMap<Character, Integer> map2 = new HashMap<>();
        for(int i=0;i<s2.length();i++){
            char ch = s2.charAt(i);
            map2.put(ch,map2.getOrDefault(ch,0)+1);
        }
        
        int mct = 0; //match count
        int dmct=s2.length();// desired match count
        HashMap<Character, Integer> map1 = new HashMap<>();
        int i=-1;
        int j=-1;
        
        while(true){
            boolean flag1=false;
            boolean flag2=false;
            
            //acquire
            while(i<s1.length()-1 && mct<dmct){
                i++;
                char ch = s1.charAt(i);
                map1.put(ch,map1.getOrDefault(ch,0)+1);
                
                if(map1.getOrDefault(ch,0) <=map2.getOrDefault(ch,0)){
                    mct++;
                }
                flag1=true;
            }
            
            //collect ans and release
            while(j<i && mct==dmct){
                String pans = s1.substring(j+1,i+1);
                if(ans.length()==0 || pans.length() < ans.length()){
                    ans=pans;
                }
                
                j++;
                char ch = s1.charAt(j);
                if(map1.get(ch)==1){
                    map1.remove(ch);
                }
                else{
                    map1.put(ch,map1.get(ch)-1);
                }
                
                if(map1.getOrDefault(ch,0) <map2.getOrDefault(ch,0)){
                    mct--;
                }
                flag2=true;
            }
            
            if(flag1==false && false==false){
                break;
            }
        }
        
        
        return ans;
    }