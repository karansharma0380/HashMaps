Ques:  Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.

A subarray is a contiguous part of an array.

Input: nums = [4,5,0,-2,-3,1], k = 5
Output: 7
Explanation: There are 7 subarrays with a sum divisible by k = 5:
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]

Input: nums = [5], k = 9
Output: 0

Soln:
This is similar to the previous question
The only change is that we are storing the num of occurence of the rem rathen than the index of it.

e.g.             0  1   2 3 4  5  6  7
                 2  -6  3 1 2  8  2  1, k=7
	 sum:0   2  -4 -1 0 2 10 12 13
	 rem:0   2  3   6 0 2  3  5  6 
	freq:1   1  1   1 2 2  2  1  2

         
public int solve(int[] arr, int k){
	int ans=0;
	
	HashMap<Integer, Integer> map = new HashMap<>();
	map.put(0,-1);
	int sum=0;
	int rem =0;

	for(int i=0;i<arr.length;i++){
		sum+=arr[i];
		rem= sum%k;

		if(rem<0){
			rem+=k;
		}

		if(map.containsKey(rem)){
			ans+=map.get(rem);
			map.put(rem,map.get(rem)+1);
		}
		else{
			map.put(rem,1);
		}
	}
	return ans;
}
