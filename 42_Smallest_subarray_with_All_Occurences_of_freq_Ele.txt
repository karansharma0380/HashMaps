Ques: Given an array A. Let X be an element in the array which has the maximum frequency. The task is to find the smallest sub segment 
	of the array which also has X as the maximum frequency element.

Note: if two or more elements have the same frequency (i.e., maximum frequency) and the same sub segment size then print the sub segment
 which occurs first in the array.

Input : A[] = {1, 2, 2, 3, 1}
Output : 2 2
Explanation:
Note that there are two elements that appear two times,
1 and 2.The smallest window for 1 is whole array and
smallest window for 2 is {2, 2}.
Since window for 2 is smaller, this is our output.


Input : A[] = {1, 4, 3, 3, 5, 5} 
Output : 3 2

Soln: 				0 1 2 3 4 5 6 7 8 9 10 11 12
Suppose, we have an array 	1 3 2 4 2 3 4 2 5 6 5  5  7 

We will have a HashMap<Integer, Pair>

				  curr_idx= as of now kya status hai	
arr[i]       freq  startIdx    l = endidx - startidx +1
   1     ->  1,        0,      	  1	
   3     ->  2,        1,      	  5
   2     ->  3,        2,      	  6
   4     ->  2,        3,      	  4
   5     ->  3,        8,      	  4
   6     ->  1,        9,      	  1
   7     ->  1,        12,     	  1

Once we are done with making this HashMap, We have numbers with their freq, start idx, length

class Solution{
    static class Pair{
        int freq;
        int s;
        int len;
    }
    ArrayList<Integer> smallestSubsegment(int arr[], int n)
    {// Complete the function
        ArrayList<Integer> ans = new ArrayList<>();
        HashMap<Integer,Pair> map = new HashMap<>();
        
        for(int i=0;i<n;i++){
            if(map.containsKey(arr[i])==false){
                Pair p = new Pair();
                p.freq=1;
                p.s=i;
                p.len=i-p.s+1;
                map.put(arr[i],p);
            }
            else{
                Pair p = map.get(arr[i]);
                p.freq++;
                p.len=i-p.s+1;
            }
        }
        
        int curr_freq=0;
        int curr_ele=0;
        int mlen=Integer.MAX_VALUE;
        
        for(int key:map.keySet()){
            Pair p = map.get(key);
            if(p.freq>curr_freq){
                curr_freq=p.freq;
                curr_ele=arr[p.s];
                mlen=p.len;
            }
            else if(p.freq==curr_freq){
                if(p.len<mlen){
                    mlen=p.len;
                    curr_ele=key;
                }
            }
        }   
        ans.add(curr_ele);
        ans.add(curr_freq);
        return ans;
    }   
}