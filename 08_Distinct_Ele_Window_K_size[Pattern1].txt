Given an array of size N and an integer K, return the count of distinct numbers in all windows of size K.

Input: arr[] = {1, 2, 1, 3, 4, 2, 3}, K = 4
Output: 3 4 4 3
Explanation: First window is {1, 2, 1, 3}, count of distinct numbers is 3
                      Second window is {2, 1, 3, 4} count of distinct numbers is 4
                      Third window is {1, 3, 4, 2} count of distinct numbers is 4
                      Fourth window is {3, 4, 2, 3} count of distinct numbers is 3

Input: arr[] = {1, 2, 4, 4}, K = 2
Output: 2 2 1
Explanation: First window is {1, 2}, count of distinct numbers is 2
                      First window is {2, 4}, count of distinct numbers is 2
                      First window is {4, 4}, count of distinct numbers is 1

Soln:

We will solve this using Acquire, work, release strategy

public static ArrayList<Integer> solve(int[] arr, int k){
	ArrayList<Integer> list = new ArrayList<>();
	HashMap<Integer, Integer> map = new HashMap<>();

	for(int i=0;i<k-1;i++){
		map.put(arr[i], map.getOrDefault(arr[i],0)+1);
	}

	for(int j=0,i=k-1;i<arr.length){
		map.put(arr[i],map.getOrDefault(arr[i],0)+1); //acquire the ith element with this our window size is now equal to k

		list.add(map.size()); //work

		//release
		int freq = map.get(arr[j]);
		if(freq==1){
			map.remove(arr[j]);
		}		
		else{
			map.put(arr[j],freq-1);
		}

		i++;
		j++;
	}

	return list;
}

 


