Ques: Given a binary array nums, return the maximum length of a contiguous subarray with an equal number of 0 and 1.

Input: nums = [0,1]
Output: 2
Explanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1.

Input: nums = [0,1,0]
Output: 2
Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.

Soln:

1. Initialize a variable 'ans' to store the maximum length of contiguous subarray with equal number of 0s and 1s.
2. Initialize a HashMap 'map' to store the cumulative sum and its corresponding index.
3. Insert (0, -1) into the 'map' to handle the case where the entire array forms a contiguous subarray.
4. Initialize a variable 'sum' to keep track of the cumulative sum.
5. Iterate through the array 'arr' from index 0 to the length of 'arr' - 1:
   a. If the current element is 0, increment 'sum' by -1.
   b. If the current element is 1, increment 'sum' by 1.
   c. Check if 'map' contains 'sum':
      i. If 'map' contains 'sum', calculate the length of the contiguous subarray with equal number of 0s and 1s.
      ii. Update 'ans' if the calculated length is greater than 'ans'.
   d. If 'map' does not contain 'sum', insert (sum, index) into 'map'.
6. Return 'ans', which represents the maximum length of contiguous subarray with equal number of 0s and 1s.


class Solution {
    public int findMaxLength(int[] arr) {
        int ans=0;
        
        HashMap<Integer, Integer> map = new HashMap<>();
        map.put(0,-1);
        
        int sum=0;
        
        for(int i=0;i<arr.length;i++){
            if(arr[i]==0){
                sum+=-1;
                
            }
            else if(arr[i]==1){
                sum+=1;
            }
            
            if(map.containsKey(sum)){
                int idx = map.get(sum);
                int len = i-idx;
                if(len>ans){
                    ans=len;
                }
            }
            else{
                map.put(sum,i);
            }
        }
        
        return ans;
    }
}