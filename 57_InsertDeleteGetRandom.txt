Leetcode 380
Ques: Implement the RandomizedSet class:

RandomizedSet() Initializes the RandomizedSet object.
bool insert(int val) Inserts an item val into the set if not present. Returns true if the item was not present, false otherwise.
bool remove(int val) Removes an item val from the set if present. Returns true if the item was present, false otherwise.
int getRandom() Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned.
You must implement the functions of the class such that each function works in average O(1) time complexity.

Example 1:

Input
["RandomizedSet", "insert", "remove", "insert", "getRandom", "remove", "insert", "getRandom"]
[[], [1], [2], [2], [], [1], [2], []]
Output
[null, true, false, true, 2, true, false, 2]

Explanation
RandomizedSet randomizedSet = new RandomizedSet();
randomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.
randomizedSet.remove(2); // Returns false as 2 does not exist in the set.
randomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].
randomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.
randomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].
randomizedSet.insert(2); // 2 was already in the set, so return false.
randomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.

Soln: 

class RandomizedSet {
    ArrayList<Integer> list;
    HashMap<Integer,Integer> map;
    Random r;
    
    public RandomizedSet() {
        list = new ArrayList<>();
        map=new HashMap<>();
        r =new Random();
    }
    
    public boolean insert(int val) {
        if(map.containsKey(val)){ //If value already there return false
            return false;
        }
        //Value not present
        map.put(val,list.size()); // value -> size() of list is idx where value will be added in the list.
        list.add(val); // Insert the value inside the list. Arraylist insert from the last. 
        return true;
    }
    
    public boolean remove(int val) {
        if(!map.containsKey(val)){
            return false; 
        }
        
        //Removal from the arrayList front is O(N)
        //Removal from ArrayList back is O(1)
        
        int remIdx = map.get(val); // Get the index which we have to remove from the arrayList
        int last = list.get(list.size()-1); // Fetch the last element of the list
        
        list.set(remIdx,last); // set the remIdx with last element
	list.remove(list.size()-1); // Now remove the last index

        map.put(last,remIdx); //update the index of last element which was set on the remIdx in map
            
        map.remove(val); // remove the val from the map now. if you do before you might get error.
        return true;
    }
    
    public int getRandom() {
        int randIdx = r.nextInt(0,list.size()); // last number is exclusive so we will get the random index of list
        int value = list.get(randIdx); //Extract that value from the list
        return value;
    }
}

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet obj = new RandomizedSet();
 * boolean param_1 = obj.insert(val);
 * boolean param_2 = obj.remove(val);
 * int param_3 = obj.getRandom();
 */