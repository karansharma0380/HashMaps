Que: Given an array arr[] of length N, find the length of the longest sub-array with a sum equal to 0.

Input: arr[] = {15, -2, 2, -8, 1, 7, 10, 23}
Output: 5
Explanation: The longest sub-array with elements summing up-to 0 is {-2, 2, -8, 1, 7}

Input: arr[] = {1, 2, 3}
Output: 0
Explanation: There is no subarray with 0 sum

Soln:

Concept:
	
	2 8 -3 -5 2 -4 6 12 1 -3 4
	------	------
	sum=x	this array has zero sum
	---------------
		sum=x

	2 8  -3 -5 2 -4 6 12 1 -3 4
  sum 0 2 10  7 2
  idx-1 0 1   2 |
		|
		|
		We have seen this sum before, at index zero and we have seen this again at idx 3
		so len =3-0=3
using this technique we will get the answer for rest of the array. 
and we want max length. We will compare the lengths and update the mLen variable. 

public int solve(int[] arr){
	HashMap<Integer, Integer> map = new HashMap<>();
	int mlen=0;

	int sum=0;
	int i=-1;
	map.put(sum,i);
	
	while(i<arr.length-1){ //Till second last element coz we are reaching the last element as soon as we are entering the loop
		i++;
		sum+=arr[i];

		if(map.containsKey(sum)==false){
			map.put(sum,i);
		}
		else{
			int len = i-map.get(sum);
			if(len>mlen){
				mlen=len;
			}
		}
	}

	return mlen;
}