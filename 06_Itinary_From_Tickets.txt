Que: Find Itinerary from a given list of tickets

Input:
"Chennai" -> "Banglore"
"Bombay" -> "Delhi"
"Goa"    -> "Chennai"
"Delhi"  -> "Goa"

Output: 
Bombay->Delhi, Delhi->Goa, Goa->Chennai, Chennai->Banglore,

It may be assumed that the input list of tickets is not cyclic and there is one ticket from every city except the final destination.

Soln:


One Solution is to build a graph and do Topological Sorting of the graph. The time complexity of this solution is O(n).

We can also use hashing to avoid building a graph. There will be place which is not there in the destination of any itinery. 
That will be our starting point and we have to find it. Once we find the starting point, we can simply traverse the given map to print
itinerary in order. The following are steps. 

1) Create a HashMap<String, Boolean> of given pair of tickets.  Let the created HashMap be 'psrc'. Every entry of 'psrc' is of the form
	HashMap<String, Boolean> psrc = new HashMap<>();
	e.g.  For every itinerary src->dest will get	
					put dest->false
					put src-> false (if exist else false) 

2) From the above test case we have,
 	Bang -> false
	Chennai -> False
	Delhi->false
	Bombay-> true*
	Goa->false
   Only true value we have is Bombay.

3) Having the Bomaby is the start point. 

3) Start from above found starting point and traverse the 'given map' 
   to print itinerary.
	Bombay-> Delhi -> Goa -> Chennai -> Bangalore.

All of the above steps require O(n) time so overall time complexity is O(n).

