Ques: Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

A subarray is a contiguous non-empty sequence of elements within an array.

Input: nums = [1,1,1], k = 2
Output: 2

Input: nums = [1,2,3], k = 3
Output: 2

Soln:

Concept:
  				0 1 2 3 4 5 6 7		
			   arr:	a b c d e f g h,  k=num
				-----    k 
				 x    -------
				-------------
				      x+k

So if (x+k)-x = k we will use this conecpt to our question. Like this if we find a sum(x+k) and we substract k from it. Then we have x
remaining. If we have already encountered x then we will add its occurence to our ans.

e.g.    	3  9  -2 4  1 -7 2 6 -5 8 -3 -7 6 2 1, k=5
         sum 0  3  12 10 14 15
   freqOfSum 1  1

0+3 = 3 -> sum-target =3-5 = -2, It is not there in our map so we will do nothing, and add 3 with freq 1 into map. 3->1
3+9 = 12-> 12-5 = 7, 12->1 in map
12-2=10 -> 10-5= 5, 10->1
10+4=14 -> 14-5=9, 14->1
14+1=15 -> 15-5=10, 10 exist in the map, Means there is a subarray with target=5sum so we will do count++ and do 15->1
So on...
		
		

public static int solve(int[] arr){
	int ans = 0;
	int sum=0;

	HashMap<Integer, Integer> map = new HashMap<>();
	map.put(0,1);

	for(int i=0;i<arr.length;i++){
		sum+=arr[i];
		if(map.containsKey(sum-target)){
			ans+=map.get(sum-target);
		}
		map.put(sum,map.getOrDefault(sum,0)+1);
	}

	return ans;	
}









