Leetcode 146
Ques: Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.

Implement the LRUCache class:

LRUCache(int capacity) Initialize the LRU cache with positive size capacity.

int get(int key) Return the value of the key if the key exists, otherwise return -1.

void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.

The functions get and put must each run in O(1) average time complexity.

Example 1:
Input
["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
Output
[null, null, null, 1, null, -1, null, -1, 3, 4]

Explanation
LRUCache lRUCache = new LRUCache(2);
lRUCache.put(1, 1); // cache is {1=1}
lRUCache.put(2, 2); // cache is {1=1, 2=2}
lRUCache.get(1);    // return 1
lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}
lRUCache.get(2);    // returns -1 (not found)
lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}
lRUCache.get(1);    // return -1 (not found)
lRUCache.get(3);    // return 3
lRUCache.get(4);    // return 4

Soln: 

We can observe there is use of HashMap in this. But hashmap does not gurantee the order of the objects inserted.
Also when the capacity of cache is full. then to insert the object we will remove the least used object from the 
cache. So we need to maintain some kind of order here. 

So for this we will use Doubly Linkedlist{This is used in very specific cases}

Idea here is that we will create a HashMap<Integer,Node> for O(1) access of the values and these nodes will be part of the Doubly Linked List.

See we have operations say...

put  1 10
                           1 -> {1,10}                H(-1,-1)<->(1,10)<->(-1,-1)T
put 2 20
 			   1 -> {1,10}
			   2 -> {2,20}                (-1,-1)<->(2,20)<->(1,10)<->(-1,-1)
put 3 30
   			   1 -> {1,10}
			   2 -> {2,20}                (-1,-1)<->(3,30)<->(2,20)<->(1,10)<->(-1,-1)
			   3 -> {3,30}

get 1
		return the value 10 from the hashmap simple.
	See (1,10) is the least recently used and is at the back now it accessed so we will shift it's position.
			   1 -> {1,10}
			   2 -> {2,20}                (-1,-1)<->(1,10)<->(3,30)<->(2,20)<->(-1,-1)
			   3 -> {3,30}
put 1 15 
			   1 -> {1,15}
			   2 -> {2,20}                (-1,-1)<->(1,15)<->(3,30)<->(2,20)<->(-1,-1)
			   3 -> {3,30}
get 1
	return the value 15 from the hashmap and reorder the doubly linked list.

From this we got to know that we need a HashMap<Integer, Node> and a Doubly LinkedList
For Doubly linkedList operatios we need are : 1. add node   //add First
					      2. Remove node
					      3. ReOrder Node





class LRUCache {
 class Node{
        int key;
        int value;
        Node prev;
        Node next;
        
        Node(int key, int value){
            this.key=key;
            this.value=value;
        }
    }
    
     public void addNode(Node node){  // add first
//             node.next= head.next;
//             head.next = node;
            
//             node.next.prev = node;
//             node.prev = head;
            
            //More Readable
            Node nbr = head.next;
            node.next=nbr;
            node.prev=head;
            
            nbr.prev=node;
            head.next=node;
        }
        
        public void removeNode(Node node){
            Node prvNbr = node.prev;
            Node nxtNbr = node.next;
            
            prvNbr.next = nxtNbr;
            nxtNbr.prev = prvNbr;
            
            node.next=null;
            node.prev=null;
        }
        
        public void moveToFront(Node node){
            removeNode(node);
            addNode(node);
        }
    
    
    HashMap<Integer,Node> cache;
    int cap;
    Node head;
    Node tail;
    
    public LRUCache(int capacity) {
        cache = new HashMap<>();
        cap=capacity;
        head  = new Node(-1,-1);
        tail = new Node(-1,-1);
        
        head.next=tail;
        tail.prev = head;
    }
    
    public int get(int key) {
        Node node  = cache.get(key);
        
        if(node==null){
            return -1;
        }
        else{
            int vl = node.value;
            moveToFront(node);
            return vl;
        }
       // return -1;
    }
    
    public void put(int key, int value) {
        Node node = cache.get(key);
        
        if(node==null){// encountered for the first time
            Node newNode = new Node(key,value);
            
            if(cache.size()==cap){
                Node LRU_Node = tail.prev;
                cache.remove(LRU_Node.key);
                removeNode(LRU_Node);
            }
            else{
               cache.put(key,newNode); 
                addNode(newNode);
            }
        }
        else{ //Already there
            node.value = value; //Update the value
            moveToFront(node); //Make it recetn node
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
