Given an array of distinct integers, find length of the longest subarray which contains numbers that can be arranged in a continuous 
sequence.

Input:  arr[] = {10, 12, 11};
Output: Length of the longest contiguous subarray is 3

Input:  arr[] = {14, 12, 11, 20};
Output: Length of the longest contiguous subarray is 2

Input:  arr[] = {1, 56, 58, 57, 90, 92, 94, 93, 91, 45};
Output: Length of the longest contiguous subarray is 5


Soln: 

Idea: 
	In the contiguous elements of an array if they are in contiguous sequence, Then
		maxElement - minElement = i - j [Remember this]
	0 1 2 3 4 5  6  7
	9 2 7 5 6 23 24 22 23 19 17 16 18 39 0
	    |
 Suppose we are here
 	i=2
	j=i+1=2+1=3
	
 
public static int sol(int[] arr){
	int ans=0;

	for(int i=0;i<arr.length-1;i++){
		int min = arr[i];
		int max = arr[i];

		HashSet<Integer> cd = new HashSet<>(); //Using to check the duplicacy
		cd.add(arr[i]);

		for(int j=i+1;j<arr.length;j++){
			if(cd.contains(arr[j])){ // Duplicate element exist there is a problem
				break;
			}
			cd.add(arr[j]);

			min = Math.min(min,arr[j]);
			max = Math.min(max,arr[j]);
			if(max-min==j-i){
				int len = j-i+1;
				if(len>ans){
					ans=len;
				}
			}
		}
	}

	return ans;
}

TC-O(n^2)