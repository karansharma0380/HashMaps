Ques: We have to find the longest subarray with sum divisible by k.

Soln:

Based on previous question:
Concept:

		0 1 2   3  4   5  6   7  8  9  10  
    Arr:	2 6 14 15  22 25  31 32 41  43 50, k=5
                ------  -----------
		 s1(x)      s2-s1 = km-kn = k(m-n)
	       s1 = k.n+x
		-------------------
			  s2(x)
			  s2= k.m + x

Suppose, We have sum s1 which is divisible by k and leaves remainder x
	 We have sum s2 which is also divisible by k and leaves remainder x.
	 so s2-s1 will also be a multiple of k means divisible by k.

So, let's go with the quesiton: We will make a HashMap with mapping rem->idx(To get the lengthof array)
			0  1 2  3  4  5  6  7  8  9  10 11
			2  4 8  1  7  3  6  1  9  2  7  3, k=5
    (Not in Map)sum:0   2  6 14 15 22 25 31
	        rem:0   2  1 4  0  2   0 1
		idx:-1  0  1 2  3  4   5 6
                                |      |
				|      |
				|      |
				|      |
				|     Already in map so just calc len if it greater than the prev on update the prev length.
				|
            Here we found 0 rem which is already there in the map, means we have a subarray with sum divisible by k.
	    Now we have to calculate the length so,  get the idx of prev rem(-1) substract it from the current idx for length.
				3-(-1) = 3+1= 4
         So in map it will only go for the first time  from next time we will just use it to calculate the length of subarray.
	 
	Question can be changed to get num of subarrays, then we have to keep the track of those index.

Now, Ques is what if the rem is -ve, coz there can be num in arrays which is -ve. 
		we will do this rem = rem + k.  why?
	Suppose rem is -5 and k=7, we want our remainder to be between 0 to 6
                       *
		-7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7
                             
rem 2(-5+7)		
			
public static int solve(int[] arr, int k){
	int ans=0;
	
	HashMap<Integer, Integer> map = new HashMap<>();
	map.put(0,-1);
	int sum=0;
	int rem=0;

	for(int i=0;i<arr.length;i++){
		sum+=arr[i];
		rem = sum % k;
		
		if(rem<0){
			rem+=k;
		}

		if(map.containsKey(rem)){
			int idx = map.get(rem);
			int len = i-idx;
			if(len>ans){
				ans=len;
			}
		}
		else{
			map.put(rem,i);	
		}
	}	

	return ans;
}