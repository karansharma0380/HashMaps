leetcode 535
Ques: TinyURL is a URL shortening service where you enter a URL such as https://leetcode.com/problems/design-tinyurl and it returns a short URL such as http://tinyurl.com/4e9iAk. Design a class to encode a URL and decode a tiny URL.

There is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.

Implement the Solution class:

-Solution() Initializes the object of the system.
-String encode(String longUrl) Returns a tiny URL for the given longUrl.
-String decode(String shortUrl) Returns the original long URL for the given shortUrl. It is guaranteed that the given shortUrl was encoded by the same object.

Input: url = "https://leetcode.com/problems/design-tinyurl"
Output: "https://leetcode.com/problems/design-tinyurl"

Explanation:
Solution obj = new Solution();
string tiny = obj.encode(url); // returns the encoded tiny url.
string ans = obj.decode(tiny); // returns the original url after decoding it.


Soln: 

Easy to understand solution.

public class Codec {

    HashMap<String, String> map  =new HashMap<>();
    // Encodes a URL to a shortened URL.
    public String encode(String longUrl) {
        StringBuilder sb = new StringBuilder();
        double value = Math.random(); // Gives the values between 0<=value<1
        value = value*100; // High chance of returning a decimal value
        value = Math.floor(value); // Now we have a ASCII value with us. 
        char ch = (char)value; // ASCII value to character mapping
        sb.append(ch);
        
        while(map.containsKey(sb.toString())){
            sb.append((char)(Math.floor(Math.random()*100)));
        }
        map.put(sb.toString(),longUrl); // TinyURL -> LongURL
        return sb.toString(); // Returns TinyURL
    }

    // Decodes a shortened URL to its original URL.
    public String decode(String shortUrl) {
        return map.get(shortUrl);
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.decode(codec.encode(url));

